(function(){"use strict";self.importScripts("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js");const m="gemini-adventure-saves",{JSZip:b}=self;async function x(e,o){try{return await(await(await(await(await(await navigator.storage.getDirectory()).getDirectoryHandle(m)).getDirectoryHandle(e)).getDirectoryHandle("images")).getFileHandle(`${o}.webp`)).getFile()}catch(c){return c.name!=="NotFoundError"&&console.warn(`Worker: Could not get image for node ${o}:`,c),null}}function r(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):""}function f(e,o,c){let l=o.split(`
`)[0];const t=l.length>50?r(l.substring(0,50))+"...":r(l);let a=`
    <p class="generator-link">Generated by <a href="https://bxx81.github.io/gemini-adventure/" target="_blank" rel="noopener noreferrer">Gemini Adventure</a></p>
    <div class="story-container"><h1>${t}</h1><p class="theme">${r(o).replace(/\n/g,"<br>")}</p>`;for(let n=0;n<e.length;n++){const i=e[n],g=e[n+1],p=r(i.sceneData.scene).replace(/\n/g,"<br>"),s=i.sceneData.isGameOver&&i.sceneData.gameOverText?`<p class="gameover-text">${r(i.sceneData.gameOverText).replace(/\n/g,"<br>")}</p>`:"",d=r(i.sceneData.imagePrompt),h=g&&g.choiceText?`<p class="choice-text"><strong>${r(c.historyChoicePrefix)}:</strong> "${r(g.choiceText)}"</p>`:"";a+=`
            <div class="node">
                <img src="./images/${i.id}.webp" alt="${d}" class="scene-image" onerror="this.style.display='none'">
                <p class="scene-text">${p}</p>
                ${s}
                ${h}
            </div>
        `}return a+="</div>",`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${t}</title>
    <style>
        body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.6; background-color: #111827; color: #d1d5db; margin: 0; padding: 20px; }
        .generator-link { text-align: center; color: #6b7280; font-size: 0.9em; margin-bottom: 20px; }
        .generator-link a { color: #818cf8; text-decoration: none; }
        .generator-link a:hover { text-decoration: underline; }
        .story-container { max-width: 800px; margin: 0 auto; background-color: #1f2937; padding: 20px 40px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.5); }
        h1 { font-size: 2.5em; text-align: center; color: #f9fafb; border-bottom: 1px solid #4b5563; padding-bottom: 10px; margin-top: 0; }
        .theme { text-align: center; font-style: italic; color: #9ca3af; margin-top: -10px; margin-bottom: 40px; }
        .node { margin-bottom: 40px; border-bottom: 1px solid #374151; padding-bottom: 40px; }
        .node:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 10px; }
        .scene-image { width: 100%; height: auto; border-radius: 8px; margin-bottom: 20px; aspect-ratio: 4 / 3; object-fit: cover; background-color: #374151; }
        .scene-text { font-size: 1.1em; }
        .gameover-text { margin-top: 20px; font-weight: bold; }
        .choice-text { margin-top: 20px; padding: 15px; background-color: #374151; border-left: 4px solid #8b5cf6; border-radius: 4px; }
        strong { color: #c4b5fd; }
    </style>
</head>
<body>
    ${a}
</body>
</html>`}self.onmessage=async e=>{const{gameLog:o,endNodeId:c,t:l}=e.data;try{const t=new b,a=[];let n=c;for(;n;){const s=o.nodes[n];if(!s)break;a.unshift(s),n=s.parentId}const i=f(a,o.theme,l);t.file("index.html",i);const g=t.folder("images");for(const s of a){const d=await x(o.id,s.id);d&&g.file(`${s.id}.webp`,d)}const p=await t.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:9}});self.postMessage({success:!0,blob:p})}catch(t){console.error("Worker error during ZIP generation:",t),self.postMessage({success:!1,error:t.message})}}})();
